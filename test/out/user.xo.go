// Package out contains the types for schema 'testxo'.
package out

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"encoding/json"
	"errors"
)

// User represents a row from '`testxo`.`user`'.
type User struct {
	ID       int            `json:"id"`       // id
	Property *UserProperty  `json:"property"` // prop_id `xo:ref=user_property.id,name=Property` 绑定user_property表的id
	Prop2    *Prop2         `json:"prop2"`    // prop2 `xo:conv=json,type=*Prop2` 利用json编码解码
	Name     sql.NullString `json:"name"`     // name
	Age      sql.NullInt64  `json:"age"`      // age

	// xo fields
	_exists, _deleted bool

	// extra fields
	ExName     string          `json:"ex_name"`    // `xo:name=ExName,type=string` 新增ExName字段
	ExAge      int             `json:"ex_age"`     // `xo:name=ExAge,type=int` 新增ExAge字段
	Properties []*UserProperty `json:"properties"` // `xo:name=Properties,ref=id#user_property.user_id` 新增Properties字段

	// json fields
	jsProp2 string `json:"-"` // prop2
}

// NewEmptyUser create empty instance
func NewEmptyUser() *User {
	u := &User{}
	u.Property = NewEmptyUserProperty()
	u.Properties = []*UserProperty{}

	return u
}

// Get Funcs

func (u *User) GetID() int {
	if u == nil {
		return 0
	}

	return u.ID
}

func (u *User) GetProperty() *UserProperty {
	if u == nil {
		return nil
	}

	return u.Property
}

func (u *User) GetProp2() *Prop2 {
	if u == nil {
		return nil
	}

	return u.Prop2
}

func (u *User) GetName() sql.NullString {
	if u == nil {
		return sql.NullString{}
	}

	return u.Name
}

func (u *User) GetAge() sql.NullInt64 {
	if u == nil {
		return sql.NullInt64{}
	}

	return u.Age
}

func (u *User) GetExName() string {
	if u == nil {
		return ""
	}

	return u.ExName
}

func (u *User) GetExAge() int {
	if u == nil {
		return 0
	}

	return u.ExAge
}

func (u *User) GetProperties() []*UserProperty {
	if u == nil {
		return nil
	}

	return u.Properties
}

// Exists determines if the User exists in the database.
func (u *User) Exists() bool {
	return u._exists
}

// Deleted provides information if the User has been deleted from the database.
func (u *User) Deleted() bool {
	return u._deleted
}

// Insert inserts the User to the database.
func (u *User) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if u._exists {
		return errors.New("insert failed: already exists")
	}
	// json fields
	buf, err := json.Marshal(u.Prop2)
	if err != nil {
		return err
	}
	u.jsProp2 = string(buf)

	// insert ref list, unique only
	if u.Property != nil {
		if err := u.Property.Insert(db); err != nil {
			return err
		}
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = "INSERT INTO `testxo`.`user` (" +
		"`prop_id`, `prop2`, `name`, `age`" +
		") VALUES (" +
		"?, ?, ?, ?" +
		")"

	// run query
	XOLog(sqlstr, u.GetProperty().GetID(), u.jsProp2, u.Name, u.Age)
	res, err := db.Exec(sqlstr, u.GetProperty().GetID(), u.jsProp2, u.Name, u.Age)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	u.ID = int(id)
	u._exists = true

	// insert ref list, unique only
	if u.Properties != nil {
		for _, item := range u.Properties {
			item.UserID = u.ID
			if err := item.Insert(db); err != nil {
				return err
			}
		}
	}

	return nil
}

// Update updates the User in the database.
func (u *User) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !u._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if u._deleted {
		return errors.New("update failed: marked for deletion")
	}
	// json fields
	buf, err := json.Marshal(u.Prop2)
	if err != nil {
		return err
	}
	u.jsProp2 = string(buf)

	// sql query
	const sqlstr = "UPDATE `testxo`.`user` SET " +
		"`prop_id` = ?, `prop2` = ?, `name` = ?, `age` = ?" +
		" WHERE `id` = ?"

	// run query
	XOLog(sqlstr, u.GetProperty().GetID(), u.jsProp2, u.Name, u.Age, u.ID)
	_, err = db.Exec(sqlstr, u.GetProperty().GetID(), u.jsProp2, u.Name, u.Age, u.ID)
	if err != nil {
		return err
	}

	// update ref list

	if u.Property != nil {
		if err := u.Property.Update(db); err != nil {
			return err
		}
	}

	if u.Properties != nil {
		for _, item := range u.Properties {
			if err := item.Update(db); err != nil {
				return err
			}
		}
	}

	return nil
}

// Save saves the User to the database.
func (u *User) Save(db XODB) error {
	if u.Exists() {
		return u.Update(db)
	}

	return u.Insert(db)
}

// Delete deletes the User from the database.
func (u *User) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !u._exists {
		return nil
	}

	// if deleted, bail
	if u._deleted {
		return nil
	}

	// sql query
	const sqlstr = "DELETE FROM `testxo`.`user` WHERE `id` = ?"

	// run query
	XOLog(sqlstr, u.ID)
	_, err = db.Exec(sqlstr, u.ID)
	if err != nil {
		return err
	}

	// set deleted
	u._deleted = true

	// delete ref list

	if u.Property != nil {
		if err := u.Property.Delete(db); err != nil {
			return err
		}
	}

	if u.Properties != nil {
		for _, item := range u.Properties {
			if err := item.Delete(db); err != nil {
				return err
			}
		}
	}

	return nil
}

// UserByID retrieves a row from '`testxo`.`user`' as a User.
//
// Generated from index 'user_id_pkey'.
func UserByID(db XODB, id int) (*User, error) {
	var err error

	// sql query
	const sqlstr = "SELECT " +
		"`id`, `prop_id`, `prop2`, `name`, `age` " +
		"FROM `testxo`.`user` " +
		"WHERE `id` = ?"

	// run query
	XOLog(sqlstr, id)
	u := User{
		_exists: true,
	}

	// ref init
	u.Property = NewEmptyUserProperty()
	u.Properties = []*UserProperty{}

	err = db.QueryRow(sqlstr, id).Scan(&u.ID, &u.Property.ID, &u.jsProp2, &u.Name, &u.Age)
	if err != nil {
		return nil, err
	}

	// ref load
	//no care about error
	u.Property, err = UserPropertyByID(db, u.Property.ID)
	//no care about error
	u.Properties, _ = UserPropertiesByUserID(db, u.ID)

	// json fields
	u.Prop2 = &Prop2{}
	if len(u.jsProp2) > 0 {
		//no care about error
		json.Unmarshal([]byte(u.jsProp2), u.Prop2)
	}

	return &u, nil
}
