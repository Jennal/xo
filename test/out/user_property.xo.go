// Package out contains the types for schema 'testxo'.
package out

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// USER_Property represents a row from '`testxo`.`user_property`'.
type USER_Property struct {
	ID       int            `json:"id"`       // id
	Nickname sql.NullString `json:"nickname"` // nickname

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the USER_Property exists in the database.
func (userp *USER_Property) Exists() bool {
	return userp._exists
}

// Deleted provides information if the USER_Property has been deleted from the database.
func (userp *USER_Property) Deleted() bool {
	return userp._deleted
}

// Insert inserts the USER_Property to the database.
func (userp *USER_Property) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if userp._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = "INSERT INTO `testxo`.`user_property` (" +
		"`id`, `nickname`" +
		") VALUES (" +
		"?, ?" +
		")"

	// run query
	XOLog(sqlstr, userp.ID, userp.Nickname)
	_, err = db.Exec(sqlstr, userp.ID, userp.Nickname)
	if err != nil {
		return err
	}

	// set existence
	userp._exists = true

	return nil
}

// Update updates the USER_Property in the database.
func (userp *USER_Property) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !userp._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if userp._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = "UPDATE `testxo`.`user_property` SET " +
		"`nickname` = ?" +
		" WHERE `id` = ?"

	// run query
	XOLog(sqlstr, userp.Nickname, userp.ID)
	_, err = db.Exec(sqlstr, userp.Nickname, userp.ID)
	return err
}

// Save saves the USER_Property to the database.
func (userp *USER_Property) Save(db XODB) error {
	if userp.Exists() {
		return userp.Update(db)
	}

	return userp.Insert(db)
}

// Delete deletes the USER_Property from the database.
func (userp *USER_Property) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !userp._exists {
		return nil
	}

	// if deleted, bail
	if userp._deleted {
		return nil
	}

	// sql query
	const sqlstr = "DELETE FROM `testxo`.`user_property` WHERE `id` = ?"

	// run query
	XOLog(sqlstr, userp.ID)
	_, err = db.Exec(sqlstr, userp.ID)
	if err != nil {
		return err
	}

	// set deleted
	userp._deleted = true

	return nil
}

// USER_PropertyByID retrieves a row from '`testxo`.`user_property`' as a USER_Property.
//
// Generated from index 'user_property_id_pkey'.
func USER_PropertyByID(db XODB, id int) (*USER_Property, error) {
	var err error

	// sql query
	const sqlstr = "SELECT " +
		"`id`, `nickname` " +
		"FROM `testxo`.`user_property` " +
		"WHERE `id` = ?"

	// run query
	XOLog(sqlstr, id)
	userp := USER_Property{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&userp.ID, &userp.Nickname)
	if err != nil {
		return nil, err
	}

	return &userp, nil
}
