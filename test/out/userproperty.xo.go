// Package out contains the types for schema 'testxo'.
package out

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// UserProperty represents a row from '`testxo`.`user_property`'.
type UserProperty struct {
	ID       int            `json:"id"`       // id
	Nickname sql.NullString `json:"nickname"` // nickname

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the UserProperty exists in the database.
func (up *UserProperty) Exists() bool {
	return up._exists
}

// Deleted provides information if the UserProperty has been deleted from the database.
func (up *UserProperty) Deleted() bool {
	return up._deleted
}

// Insert inserts the UserProperty to the database.
func (up *UserProperty) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if up._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = "INSERT INTO `testxo`.`user_property` (" +
		"`id`, `nickname`" +
		") VALUES (" +
		"?, ?" +
		")"

	// run query
	XOLog(sqlstr, up.ID, up.Nickname)
	_, err = db.Exec(sqlstr, up.ID, up.Nickname)
	if err != nil {
		return err
	}

	// set existence
	up._exists = true

	return nil
}

// Update updates the UserProperty in the database.
func (up *UserProperty) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !up._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if up._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = "UPDATE `testxo`.`user_property` SET " +
		"`nickname` = ?" +
		" WHERE `id` = ?"

	// run query
	XOLog(sqlstr, up.Nickname, up.ID)
	_, err = db.Exec(sqlstr, up.Nickname, up.ID)
	if err != nil {
		return err
	}

	return nil
}

// Save saves the UserProperty to the database.
func (up *UserProperty) Save(db XODB) error {
	if up.Exists() {
		return up.Update(db)
	}

	return up.Insert(db)
}

// Delete deletes the UserProperty from the database.
func (up *UserProperty) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !up._exists {
		return nil
	}

	// if deleted, bail
	if up._deleted {
		return nil
	}

	// sql query
	const sqlstr = "DELETE FROM `testxo`.`user_property` WHERE `id` = ?"

	// run query
	XOLog(sqlstr, up.ID)
	_, err = db.Exec(sqlstr, up.ID)
	if err != nil {
		return err
	}

	// set deleted
	up._deleted = true

	return nil
}

// UserPropertyByID retrieves a row from '`testxo`.`user_property`' as a UserProperty.
//
// Generated from index 'user_property_id_pkey'.
func UserPropertyByID(db XODB, id int) (*UserProperty, error) {
	var err error

	// sql query
	const sqlstr = "SELECT " +
		"`id`, `nickname` " +
		"FROM `testxo`.`user_property` " +
		"WHERE `id` = ?"

	// run query
	XOLog(sqlstr, id)
	up := UserProperty{
		_exists: true,
	}

	// ref init

	err = db.QueryRow(sqlstr, id).Scan(&up.ID, &up.Nickname)
	if err != nil {
		return nil, err
	}

	// ref load

	return &up, nil
}
