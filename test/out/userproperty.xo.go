// Package out contains the types for schema 'testxo'.
package out

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"encoding/json"
	"errors"
)

// UserProperty represents a row from '`testxo`.`user_property`'.
type UserProperty struct {
	ID          int32          `json:"id"`           // id
	UserID      int32          `json:"user_id"`      // user_id
	Nickname    sql.NullString `json:"nickname"`     // nickname
	CompleteIds []int32        `json:"complete_ids"` // complete_ids `xo:conv=json,type=[]int32` 利用json编码解码

	// xo fields
	_exists, _deleted bool

	// json fields
	jsCompleteIds string `json:"-"` // complete_ids
}

// NewEmptyUserProperty create empty instance
func NewEmptyUserProperty() *UserProperty {
	up := &UserProperty{}

	return up
}

// Get Funcs

func (up *UserProperty) GetID() int32 {
	if up == nil {
		return 0
	}

	return up.ID
}

func (up *UserProperty) GetUserID() int32 {
	if up == nil {
		return 0
	}

	return up.UserID
}

func (up *UserProperty) GetNickname() sql.NullString {
	if up == nil {
		return sql.NullString{}
	}

	return up.Nickname
}

func (up *UserProperty) GetCompleteIds() []int32 {
	if up == nil {
		return nil
	}

	return up.CompleteIds
}

// Exists determines if the UserProperty exists in the database.
func (up *UserProperty) Exists() bool {
	return up._exists
}

// Deleted provides information if the UserProperty has been deleted from the database.
func (up *UserProperty) Deleted() bool {
	return up._deleted
}

// Insert inserts the UserProperty to the database.
func (up *UserProperty) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if up._exists {
		return errors.New("insert failed: already exists")
	}
	// json fields
	buf, err := json.Marshal(up.CompleteIds)
	if err != nil {
		return err
	}
	up.jsCompleteIds = string(buf)

	// sql insert query, primary key provided by autoincrement
	const sqlstr = "INSERT INTO `testxo`.`user_property` (" +
		"`user_id`, `nickname`, `complete_ids`" +
		") VALUES (" +
		"?, ?, ?" +
		")"

	// run query
	XOLog(sqlstr, up.UserID, up.Nickname, up.jsCompleteIds)
	res, err := db.Exec(sqlstr, up.UserID, up.Nickname, up.jsCompleteIds)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	up.ID = int32(id)
	up._exists = true

	return nil
}

// Update updates the UserProperty in the database.
func (up *UserProperty) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !up._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if up._deleted {
		return errors.New("update failed: marked for deletion")
	}
	// json fields
	buf, err := json.Marshal(up.CompleteIds)
	if err != nil {
		return err
	}
	up.jsCompleteIds = string(buf)

	// sql query
	const sqlstr = "UPDATE `testxo`.`user_property` SET " +
		"`user_id` = ?, `nickname` = ?, `complete_ids` = ?" +
		" WHERE `id` = ?"

	// run query
	XOLog(sqlstr, up.UserID, up.Nickname, up.jsCompleteIds, up.ID)
	_, err = db.Exec(sqlstr, up.UserID, up.Nickname, up.jsCompleteIds, up.ID)
	if err != nil {
		return err
	}

	return nil
}

// Save saves the UserProperty to the database.
func (up *UserProperty) Save(db XODB) error {
	if up.Exists() {
		return up.Update(db)
	}

	return up.Insert(db)
}

// Delete deletes the UserProperty from the database.
func (up *UserProperty) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !up._exists {
		return nil
	}

	// if deleted, bail
	if up._deleted {
		return nil
	}

	// sql query
	const sqlstr = "DELETE FROM `testxo`.`user_property` WHERE `id` = ?"

	// run query
	XOLog(sqlstr, up.ID)
	_, err = db.Exec(sqlstr, up.ID)
	if err != nil {
		return err
	}

	// set deleted
	up._deleted = true

	return nil
}

// UserPropertiesByUserID retrieves a row from '`testxo`.`user_property`' as a UserProperty.
//
// Generated from index 'idx_user_id'.
func UserPropertiesByUserID(db XODB, userID int32) ([]*UserProperty, error) {
	var err error

	// sql query
	const sqlstr = "SELECT " +
		"`id`, `user_id`, `nickname`, `complete_ids` " +
		"FROM `testxo`.`user_property` " +
		"WHERE `user_id` = ?"

	// run query
	XOLog(sqlstr, userID)
	q, err := db.Query(sqlstr, userID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*UserProperty{}
	for q.Next() {
		up := UserProperty{
			_exists: true,
		}

		// ref init

		// scan
		err = q.Scan(&up.ID, &up.UserID, &up.Nickname, &up.jsCompleteIds)
		if err != nil {
			return nil, err
		}

		// ref load

		// json fields
		up.CompleteIds = []int32{}
		if len(up.jsCompleteIds) > 0 {
			err = json.Unmarshal([]byte(up.jsCompleteIds), up.CompleteIds)
			if err != nil {
				return nil, err
			}
		}

		res = append(res, &up)
	}

	return res, nil
}

// UserPropertyByID retrieves a row from '`testxo`.`user_property`' as a UserProperty.
//
// Generated from index 'user_property_id_pkey'.
func UserPropertyByID(db XODB, id int32) (*UserProperty, error) {
	var err error

	// sql query
	const sqlstr = "SELECT " +
		"`id`, `user_id`, `nickname`, `complete_ids` " +
		"FROM `testxo`.`user_property` " +
		"WHERE `id` = ?"

	// run query
	XOLog(sqlstr, id)
	up := UserProperty{
		_exists: true,
	}

	// ref init

	err = db.QueryRow(sqlstr, id).Scan(&up.ID, &up.UserID, &up.Nickname, &up.jsCompleteIds)
	if err != nil {
		return nil, err
	}

	// ref load

	// json fields
	up.CompleteIds = []int32{}
	if len(up.jsCompleteIds) > 0 {
		//no care about error
		json.Unmarshal([]byte(up.jsCompleteIds), up.CompleteIds)
	}

	return &up, nil
}
